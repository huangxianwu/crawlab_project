#!/usr/bin/env python3
"""
Êü•ËØ¢ÈááÈõÜÁöÑÂïÜÂìÅ‰ø°ÊÅØ
Ê£ÄÊü•ÂïÜÂìÅÊï∞ÊçÆÂåÖÂê´ÁöÑÂ≠óÊÆµ
"""
import sys
import os
import json
from datetime import datetime

# Ê∑ªÂä†È°πÁõÆË∑ØÂæÑ
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from utils.database import get_db_manager
from utils.logger import setup_logger

def check_collected_products():
    """Êü•ËØ¢ÈááÈõÜÁöÑÂïÜÂìÅ‰ø°ÊÅØ"""
    print("üîç Êü•ËØ¢ÈááÈõÜÁöÑÂïÜÂìÅ‰ø°ÊÅØ")
    print("=" * 60)
    
    # ÂàùÂßãÂåñÊó•ÂøóÂíåÊï∞ÊçÆÂ∫ì
    logger = setup_logger('check_products')
    db_manager = get_db_manager()
    
    try:
        # ËøûÊé•Êï∞ÊçÆÂ∫ì
        if not db_manager.connect():
            print("‚ùå Êï∞ÊçÆÂ∫ìËøûÊé•Â§±Ë¥•")
            return
        
        print("‚úÖ Êï∞ÊçÆÂ∫ìËøûÊé•ÊàêÂäü")
        
        # Ëé∑ÂèñÊï∞ÊçÆÂ∫ìÁªüËÆ°‰ø°ÊÅØ
        stats = db_manager.get_statistics()
        if "error" not in stats:
            print(f"üìä Êï∞ÊçÆÂ∫ìÁªüËÆ°:")
            print(f"  ÊÄªÂïÜÂìÅÊï∞: {stats['total_products']} Êù°")
            print(f"  ÊªëÂùóÊàêÂäüÁéá: {stats['slider_success_rate']}%")
        
        # Êü•ËØ¢ÊúÄËøëÈááÈõÜÁöÑÂïÜÂìÅÔºàÊåâÂàõÂª∫Êó∂Èó¥ÊéíÂ∫èÔºâ
        print(f"\nüîç Êü•ËØ¢ÊúÄËøëÈááÈõÜÁöÑÂïÜÂìÅ...")
        
        # ‰ΩøÁî®MongoDBÊü•ËØ¢ÊúÄËøëÁöÑÂïÜÂìÅ
        collection = db_manager.collection
        if collection is not None:
            # Êü•ËØ¢ÊúÄËøë30Êù°ÂïÜÂìÅËÆ∞ÂΩï
            recent_products = list(collection.find().sort("scraped_at", -1).limit(30))
            
            if recent_products:
                print(f"‚úÖ ÊâæÂà∞ {len(recent_products)} Êù°ÊúÄËøëÁöÑÂïÜÂìÅËÆ∞ÂΩï")
                
                # ÂàÜÊûêÂ≠óÊÆµÁªìÊûÑ
                print(f"\nüìã ÂïÜÂìÅÊï∞ÊçÆÂ≠óÊÆµÂàÜÊûê:")
                
                # Ëé∑ÂèñÁ¨¨‰∏Ä‰∏™ÂïÜÂìÅÁöÑÊâÄÊúâÂ≠óÊÆµ
                sample_product = recent_products[0]
                all_fields = list(sample_product.keys())
                
                print(f"üìä ÂïÜÂìÅËÆ∞ÂΩïÂåÖÂê´ {len(all_fields)} ‰∏™Â≠óÊÆµ:")
                for i, field in enumerate(all_fields, 1):
                    field_value = sample_product.get(field)
                    field_type = type(field_value).__name__
                    
                    # ÊòæÁ§∫Â≠óÊÆµÂÄºÁöÑÈ¢ÑËßà
                    if isinstance(field_value, str) and len(field_value) > 50:
                        preview = field_value[:50] + "..."
                    else:
                        preview = str(field_value)
                    
                    print(f"  {i:2d}. {field:<20} ({field_type:<10}) = {preview}")
                
                # ÊòæÁ§∫ÊúÄËøëÈááÈõÜÁöÑÂïÜÂìÅÊ†∑‰æã
                print(f"\nüì¶ ÊúÄËøëÈááÈõÜÁöÑÂïÜÂìÅÊ†∑‰æã:")
                print("-" * 80)
                
                for i, product in enumerate(recent_products[:5], 1):
                    print(f"\nÂïÜÂìÅ {i}:")
                    print(f"  ID: {product.get('_id', 'N/A')}")
                    print(f"  ÂïÜÂìÅID: {product.get('product_id', 'N/A')}")
                    print(f"  Ê†áÈ¢ò: {product.get('title', 'N/A')}")
                    print(f"  ÂÖ≥ÈîÆËØç: {product.get('keyword', 'N/A')}")
                    print(f"  ‰ª∑Ê†º: ${product.get('current_price', 0)}")
                    print(f"  Âéü‰ª∑: ${product.get('origin_price', 0)}")
                    print(f"  Â∫óÈì∫: {product.get('shop_name', 'N/A')}")
                    print(f"  ÈîÄÈáè: {product.get('sold_count', 0)}")
                    print(f"  ËØÑÂàÜ: {product.get('product_rating', 0)}‚≠ê")
                    print(f"  ÂõæÁâá: {product.get('product_image', 'N/A')[:50]}...")
                    print(f"  ÈìæÊé•: {product.get('product_url', 'N/A')[:50]}...")
                    print(f"  ÈááÈõÜÊó∂Èó¥: {product.get('scraped_at', 'N/A')}")
                    print(f"  ÊªëÂùóÂ§ÑÁêÜ: {product.get('slider_encountered', False)}")
                
                # ÊåâÂÖ≥ÈîÆËØçÂàÜÁªÑÁªüËÆ°
                print(f"\nüìä ÊåâÂÖ≥ÈîÆËØçÂàÜÁªÑÁªüËÆ°:")
                keyword_stats = {}
                for product in recent_products:
                    keyword = product.get('keyword', 'unknown')
                    if keyword not in keyword_stats:
                        keyword_stats[keyword] = 0
                    keyword_stats[keyword] += 1
                
                for keyword, count in keyword_stats.items():
                    print(f"  {keyword}: {count} ‰∏™ÂïÜÂìÅ")
                
                # ‰ª∑Ê†ºÂàÜÊûê
                print(f"\nüí∞ ‰ª∑Ê†ºÂàÜÊûê:")
                prices = [float(p.get('current_price', 0)) for p in recent_products if p.get('current_price')]
                if prices:
                    print(f"  ÊúÄ‰Ωé‰ª∑Ê†º: ${min(prices):.2f}")
                    print(f"  ÊúÄÈ´ò‰ª∑Ê†º: ${max(prices):.2f}")
                    print(f"  Âπ≥Âùá‰ª∑Ê†º: ${sum(prices)/len(prices):.2f}")
                
                # Ê£ÄÊü•Â≠óÊÆµÂÆåÊï¥ÊÄß
                print(f"\nüîç Â≠óÊÆµÂÆåÊï¥ÊÄßÊ£ÄÊü•:")
                important_fields = [
                    'product_id', 'title', 'current_price', 'shop_name', 
                    'product_image', 'product_url', 'sold_count', 'product_rating'
                ]
                
                for field in important_fields:
                    filled_count = sum(1 for p in recent_products if p.get(field) and str(p.get(field)).strip())
                    percentage = (filled_count / len(recent_products)) * 100
                    status = "‚úÖ" if percentage > 80 else "‚ö†Ô∏è" if percentage > 50 else "‚ùå"
                    print(f"  {status} {field:<20}: {filled_count:2d}/{len(recent_products)} ({percentage:5.1f}%)")
                
                # ÂØºÂá∫Ê†∑‰æãÊï∞ÊçÆÂà∞JSONÊñá‰ª∂
                print(f"\nüìÑ ÂØºÂá∫Ê†∑‰æãÊï∞ÊçÆ...")
                sample_data = []
                for product in recent_products[:10]:
                    # ËΩ¨Êç¢ObjectId‰∏∫Â≠óÁ¨¶‰∏≤
                    product_dict = {}
                    for key, value in product.items():
                        if key == '_id':
                            product_dict[key] = str(value)
                        elif isinstance(value, datetime):
                            product_dict[key] = value.isoformat()
                        else:
                            product_dict[key] = value
                    sample_data.append(product_dict)
                
                # ‰øùÂ≠òÂà∞Êñá‰ª∂
                output_file = f"sample_products_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                with open(output_file, 'w', encoding='utf-8') as f:
                    json.dump(sample_data, f, ensure_ascii=False, indent=2)
                
                print(f"‚úÖ Ê†∑‰æãÊï∞ÊçÆÂ∑≤ÂØºÂá∫Âà∞: {output_file}")
                
            else:
                print("‚ö†Ô∏è Êú™ÊâæÂà∞ÂïÜÂìÅËÆ∞ÂΩï")
        else:
            print("‚ùå Êó†Ê≥ïËÆøÈóÆÊï∞ÊçÆÂ∫ìÈõÜÂêà")
        
    except Exception as e:
        print(f"‚ùå Êü•ËØ¢ËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ: {e}")
        logger.error(f"Êü•ËØ¢Â§±Ë¥•: {e}")
        
    finally:
        # Ê∏ÖÁêÜËµÑÊ∫ê
        if db_manager:
            db_manager.disconnect()
            print(f"\n‚úÖ Êï∞ÊçÆÂ∫ìËøûÊé•Â∑≤ÂÖ≥Èó≠")

def main():
    """‰∏ªÂáΩÊï∞"""
    print("TikTok ShopÂïÜÂìÅÊï∞ÊçÆÊü•ËØ¢Â∑•ÂÖ∑")
    print("Êü•ËØ¢ÊúÄËøëÈááÈõÜÁöÑÂïÜÂìÅ‰ø°ÊÅØÂíåÂ≠óÊÆµÁªìÊûÑ")
    print()
    
    check_collected_products()
    
    print(f"\n" + "=" * 60)
    print("üéâ ÂïÜÂìÅÊï∞ÊçÆÊü•ËØ¢ÂÆåÊàêÔºÅ")
    print("=" * 60)

if __name__ == "__main__":
    main()